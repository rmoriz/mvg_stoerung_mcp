# MVG StÃ¶rung MCP Server

## Project Overview
This is a Model Context Protocol (MCP) server that provides cached access to Munich Public Transport (MVG) disruption data. The server implements the MCP protocol to expose real-time transit incident information with intelligent caching.

## Key Features
- Real-time MVG incident data access
- 10+ minute intelligent caching system
- Search and filtering capabilities
- MCP protocol compliance
- Async/await architecture

## Architecture
The server consists of three main components:
1. MVGDataFetcher: Handles API communication with MVG
2. MVGCache: Implements time-based caching (10+ minutes)
3. MVGMCPServer: MCP protocol implementation

## Data Source
- API Endpoint: https://www.mvg.de/api/bgw-pt/v3/messages
- Filters for INCIDENT type messages only
- Enhances data with human-readable timestamps

## MCP Tools Available

### get_mvg_incidents
Description: Get current MVG incidents (cached for 10+ minutes)
Parameters:
  - force_refresh (boolean) (optional): Force refresh cache even if not expired [default: False]

### get_cache_status
Description: Get information about the cache status
Parameters: None

### search_incidents
Description: Search incidents by line, title, or description
Parameters:
  - query (string) (required): Search query (searches in title, description, and line labels)
  - line (string) (optional): Filter by specific line (e.g., 'U6', 'S1', 'Bus 100')

## MCP Resources Available

### mvg://incidents
Name: MVG Incidents
Description: Current incidents from Munich Public Transport (MVG)
MIME Type: application/json

### mvg://cache-info
Name: Cache Information
Description: Information about the current cache status
MIME Type: application/json


## Usage Examples

### Getting Current Incidents
Use the get_mvg_incidents tool to retrieve all current transit incidents. The data is automatically cached for at least 10 minutes to reduce API load.

### Searching Incidents
Use the search_incidents tool with a query parameter to find specific incidents. You can also filter by transport line (e.g., "U6", "S1", "Bus 100").

### Cache Management
Use get_cache_status to monitor cache state and get_mvg_incidents with force_refresh=true to manually refresh cached data.

## Data Format
Each incident includes:
- title: Brief incident description
- description: Detailed incident information
- publication/validFrom/validTo: Timestamps (Unix milliseconds + human-readable)
- lines: Affected transport lines with details
- type: Always "INCIDENT"
- provider: Always "MVG"

## Technical Notes
- Implements async/await for performance
- Uses httpx for HTTP requests
- Pydantic for data validation
- Minimum 10-minute cache duration as specified
- Handles API errors gracefully
- Filters out non-incident messages

## Integration
Configure in MCP client as:
{
  "mcpServers": {
    "mvg-stoerung": {
      "command": "python3",
      "args": ["mvg_mcp_server.py"],
      "cwd": "/path/to/mvg_stoerung_mcp"
    }
  }
}

## Dependencies
- mcp>=1.0.0: MCP framework
- httpx>=0.25.0: Async HTTP client  
- pydantic>=2.0.0: Data validation

## Disclaimer
Not an official MVG project. Please ask MVG for permission before use.
